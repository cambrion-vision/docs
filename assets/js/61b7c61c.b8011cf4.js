"use strict";(self.webpackChunkcambrion_doc=self.webpackChunkcambrion_doc||[]).push([[147],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),l=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(t),m=r,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?i.createElement(y,a(a({ref:n},c),{},{components:t})):i.createElement(y,a({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[d]="string"==typeof e?e:r,a[1]=p;for(var l=2;l<o;l++)a[l]=t[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6172:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var i=t(7462),r=(t(7294),t(3905));const o={description:"Processing documents by directly calling a pipeline",sidebar_position:1},a="Processing documents",p={unversionedId:"pipelines/pipeline",id:"pipelines/pipeline",title:"Processing documents",description:"Processing documents by directly calling a pipeline",source:"@site/docs/pipelines/pipeline.md",sourceDirName:"pipelines",slug:"/pipelines/pipeline",permalink:"/docs/pipelines/pipeline",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Processing documents by directly calling a pipeline",sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Create pipelines",permalink:"/docs/pipelines/extractions"},next:{title:"Batch processing",permalink:"/docs/pipelines/executions"}},s={},l=[{value:"List pipelines",id:"list-pipelines",level:2},{value:"Asynchronously calling a pipeline",id:"asynchronously-calling-a-pipeline",level:2},{value:"Idempotence of a pipeline",id:"idempotence-of-a-pipeline",level:2},{value:"Underlying concept",id:"underlying-concept",level:2}],c={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"processing-documents"},"Processing documents"),(0,r.kt)("p",null,"Processing documents with the Cambrion API is simply done by calling a pipeline directly. You can feed data into the pipeline by using the pipeline endpoint and the pipeline is triggered to be executed with your data. Once the pipeline finished processing your data, the results are delivered in the response body of the API call. Either as an ",(0,r.kt)("a",{parentName:"p",href:"./observations"},"observation"),", a JSON object derived from the observation or a JSONata transformed observation."),(0,r.kt)("p",null,"Here is a simple example of calling a pipeline with a PNG image as input media and returning the observation as result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import base64\nfrom io import BytesIO\nfrom PIL import Image\n\nimport json\nimport requests\n\nCAMBRION_API_KEY = \"INSERT_API_KEY\"\nheaders = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n  'X-API-Key': CAMBRION_API_KEY\n}\n\nurl = \"https://api.cambrion.io/v1/pipelines/my-pipeline/executeSync\"\n\nimage = Image.open('./path/to/my/image/image.png')\n\nbuffered = BytesIO()\nimage.save(buffered, format=\"PNG\")\nimg_str = base64.b64encode(buffered.getvalue()).decode()\n\npayload = json.dumps({\n    \"media\": [img_str],\n})\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nobservation = response.json()\n")),(0,r.kt)("p",null,"The response contains the observation as JSON produced by the pipeline with ID ",(0,r.kt)("inlineCode",{parentName:"p"},"my-pipeline"),"."),(0,r.kt)("h2",{id:"list-pipelines"},"List pipelines"),(0,r.kt)("p",null,"To get a list of avaiable pipelines perform a GET request on the ",(0,r.kt)("inlineCode",{parentName:"p"},"pipelines")," endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import requests\n\nCAMBRION_API_KEY = \"INSERT_API_KEY\"\nheaders = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n  'X-API-Key': CAMBRION_API_KEY\n}\n\nurl = \"https://api.cambrion.io/v1/pipelines\"\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\npipelines = response.json()\n")),(0,r.kt)("h2",{id:"asynchronously-calling-a-pipeline"},"Asynchronously calling a pipeline"),(0,r.kt)("p",null,"To implement background processing of documents one can execute a pipeline asynchronously by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"executeAsync")," endpoint:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import base64\nfrom io import BytesIO\nfrom PIL import Image\n\nimport json\nimport requests\n\nCAMBRION_API_KEY = \"INSERT_API_KEY\"\nheaders = {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json',\n  'X-API-Key': CAMBRION_API_KEY\n}\n\nurl = \"https://api.cambrion.io/v1/pipelines/my-pipeline/executeAsync\"\n\nimage = Image.open('./path/to/my/image/image.png')\n\nbuffered = BytesIO()\nimage.save(buffered, format=\"PNG\")\nimg_str = base64.b64encode(buffered.getvalue()).decode()\n\npayload = json.dumps({\n    \"media\": [img_str],\n})\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nexecution = response.json()\n")),(0,r.kt)("p",null,"The request above reponds immediatly. The reponse object contains the ID of the execution which can be used to retrieve the resulting observation once the pipeline has finnished. The execution is created automatically if no execution ID is given. "),(0,r.kt)("p",null,"Adding an ",(0,r.kt)("inlineCode",{parentName:"p"},"executionId")," to the payload executes the pipeline on the media files contained in the execution. Therefore no media files need to be provided in the pipeline call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'payload = json.dumps({\n    "executionId": "my-execution-id",\n})\n')),(0,r.kt)("p",null,"See here on how to create an execution: ",(0,r.kt)("a",{parentName:"p",href:"./executions#creating-an-execution"},"Creating an execution")),(0,r.kt)("h2",{id:"idempotence-of-a-pipeline"},"Idempotence of a pipeline"),(0,r.kt)("p",null,"Executing a pipeline multiple times on an execution is a non-idempotent process. That means that the results of any additional call will be appended to the observation. Calling a pipeline directly with the same data will however result in the same result in every subsequent call."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The uploaded media objects are ",(0,r.kt)("strong",{parentName:"p"},"not persisted")," when calling the pipeline directly!")),(0,r.kt)("h2",{id:"underlying-concept"},"Underlying concept"),(0,r.kt)("p",null,"Pipelines are based on ",(0,r.kt)("a",{parentName:"p",href:"https://docs.nvidia.com/deeplearning/triton-inference-server/user-guide/docs/user_guide/architecture.html#ensemble-models"},"NVIDIA Triton Ensemble Models"),"."))}u.isMDXComponent=!0}}]);