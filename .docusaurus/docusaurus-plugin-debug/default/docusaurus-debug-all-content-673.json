{
  "docusaurus-plugin-content-docs": {
    "default": {
      "loadedVersions": [
        {
          "versionName": "current",
          "label": "Next",
          "banner": null,
          "badge": false,
          "noIndex": false,
          "className": "docs-version-current",
          "path": "/docs",
          "tagsPath": "/docs/tags",
          "isLast": true,
          "routePriority": -1,
          "contentPath": "C:\\Users\\daniel\\Documents\\IWR\\Code\\Cambrion\\repos\\github\\docs\\docs",
          "contentPathLocalized": "C:\\Users\\daniel\\Documents\\IWR\\Code\\Cambrion\\repos\\github\\docs\\i18n\\en\\docusaurus-plugin-content-docs\\current",
          "docs": [
            {
              "unversionedId": "integrations/camunda",
              "id": "integrations/camunda",
              "title": "Camunda",
              "description": "Using Cambrion with Camunda",
              "source": "@site/docs/integrations/camunda.md",
              "sourceDirName": "integrations",
              "slug": "/integrations/camunda",
              "permalink": "/docs/integrations/camunda",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "description": "Using Cambrion with Camunda",
                "sidebar_position": 3
              },
              "sidebar": "defaultSidebar",
              "previous": {
                "title": "Integrations",
                "permalink": "/docs/category/integrations"
              },
              "next": {
                "title": "Outsystems",
                "permalink": "/docs/integrations/outsystems"
              }
            },
            {
              "unversionedId": "integrations/outsystems",
              "id": "integrations/outsystems",
              "title": "Outsystems",
              "description": "Using Cambrion with Outsystems",
              "source": "@site/docs/integrations/outsystems.md",
              "sourceDirName": "integrations",
              "slug": "/integrations/outsystems",
              "permalink": "/docs/integrations/outsystems",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "description": "Using Cambrion with Outsystems",
                "sidebar_position": 3
              },
              "sidebar": "defaultSidebar",
              "previous": {
                "title": "Camunda",
                "permalink": "/docs/integrations/camunda"
              },
              "next": {
                "title": "REST API",
                "permalink": "/docs/integrations/rest"
              }
            },
            {
              "unversionedId": "integrations/rest",
              "id": "integrations/rest",
              "title": "REST API",
              "description": "Using the REST API",
              "source": "@site/docs/integrations/rest.md",
              "sourceDirName": "integrations",
              "slug": "/integrations/rest",
              "permalink": "/docs/integrations/rest",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "description": "Using the REST API",
                "sidebar_position": 3
              },
              "sidebar": "defaultSidebar",
              "previous": {
                "title": "Outsystems",
                "permalink": "/docs/integrations/outsystems"
              }
            },
            {
              "unversionedId": "intro",
              "id": "intro",
              "title": "Introduction",
              "description": "This is the guide",
              "source": "@site/docs/intro.md",
              "sourceDirName": ".",
              "slug": "/intro",
              "permalink": "/docs/intro",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "description": "This is the guide",
                "sidebar_position": 1
              },
              "sidebar": "defaultSidebar",
              "next": {
                "title": "Workflows",
                "permalink": "/docs/category/workflows"
              }
            },
            {
              "unversionedId": "use-cases/box",
              "id": "use-cases/box",
              "title": "Link customer data",
              "description": "Link customer data on a delivery box",
              "source": "@site/docs/use-cases/box.md",
              "sourceDirName": "use-cases",
              "slug": "/use-cases/box",
              "permalink": "/docs/use-cases/box",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "description": "Link customer data on a delivery box",
                "sidebar_position": 3
              },
              "sidebar": "defaultSidebar",
              "previous": {
                "title": "Use-cases",
                "permalink": "/docs/category/use-cases"
              },
              "next": {
                "title": "Invoice extract",
                "permalink": "/docs/use-cases/invoice"
              }
            },
            {
              "unversionedId": "use-cases/invoice",
              "id": "use-cases/invoice",
              "title": "Invoice extract",
              "description": "Extract customer data from an invoice",
              "source": "@site/docs/use-cases/invoice.md",
              "sourceDirName": "use-cases",
              "slug": "/use-cases/invoice",
              "permalink": "/docs/use-cases/invoice",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "description": "Extract customer data from an invoice",
                "sidebar_position": 3
              },
              "sidebar": "defaultSidebar",
              "previous": {
                "title": "Link customer data",
                "permalink": "/docs/use-cases/box"
              },
              "next": {
                "title": "Recipe extract",
                "permalink": "/docs/use-cases/recipe"
              }
            },
            {
              "unversionedId": "use-cases/recipe",
              "id": "use-cases/recipe",
              "title": "Recipe extract",
              "description": "Extract customer data from a recipe",
              "source": "@site/docs/use-cases/recipe.md",
              "sourceDirName": "use-cases",
              "slug": "/use-cases/recipe",
              "permalink": "/docs/use-cases/recipe",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "description": "Extract customer data from a recipe",
                "sidebar_position": 3
              },
              "sidebar": "defaultSidebar",
              "previous": {
                "title": "Invoice extract",
                "permalink": "/docs/use-cases/invoice"
              },
              "next": {
                "title": "Integrations",
                "permalink": "/docs/category/integrations"
              }
            },
            {
              "unversionedId": "workflows/executions",
              "id": "workflows/executions",
              "title": "Using an execution",
              "description": "Using executions",
              "source": "@site/docs/workflows/executions.md",
              "sourceDirName": "workflows",
              "slug": "/workflows/executions",
              "permalink": "/docs/workflows/executions",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "description": "Using executions",
                "sidebar_position": 3
              },
              "sidebar": "defaultSidebar",
              "previous": {
                "title": "Calling a pipeline",
                "permalink": "/docs/workflows/pipeline"
              },
              "next": {
                "title": "Link business data",
                "permalink": "/docs/workflows/linker"
              }
            },
            {
              "unversionedId": "workflows/linker",
              "id": "workflows/linker",
              "title": "Link business data",
              "description": "Link business data",
              "source": "@site/docs/workflows/linker.md",
              "sourceDirName": "workflows",
              "slug": "/workflows/linker",
              "permalink": "/docs/workflows/linker",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "description": "Link business data",
                "sidebar_position": 3
              },
              "sidebar": "defaultSidebar",
              "previous": {
                "title": "Using an execution",
                "permalink": "/docs/workflows/executions"
              },
              "next": {
                "title": "The observation object",
                "permalink": "/docs/workflows/observations"
              }
            },
            {
              "unversionedId": "workflows/observations",
              "id": "workflows/observations",
              "title": "The observation object",
              "description": "Organizing results with observations",
              "source": "@site/docs/workflows/observations.md",
              "sourceDirName": "workflows",
              "slug": "/workflows/observations",
              "permalink": "/docs/workflows/observations",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "description": "Organizing results with observations",
                "sidebar_position": 3
              },
              "sidebar": "defaultSidebar",
              "previous": {
                "title": "Link business data",
                "permalink": "/docs/workflows/linker"
              },
              "next": {
                "title": "Use-cases",
                "permalink": "/docs/category/use-cases"
              }
            },
            {
              "unversionedId": "workflows/pipeline",
              "id": "workflows/pipeline",
              "title": "Calling a pipeline",
              "description": "Directly call a pipeline",
              "source": "@site/docs/workflows/pipeline.md",
              "sourceDirName": "workflows",
              "slug": "/workflows/pipeline",
              "permalink": "/docs/workflows/pipeline",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "description": "Directly call a pipeline",
                "sidebar_position": 1
              },
              "sidebar": "defaultSidebar",
              "previous": {
                "title": "Workflows",
                "permalink": "/docs/category/workflows"
              },
              "next": {
                "title": "Using an execution",
                "permalink": "/docs/workflows/executions"
              }
            }
          ],
          "drafts": [],
          "sidebars": {
            "defaultSidebar": [
              {
                "type": "doc",
                "id": "intro"
              },
              {
                "type": "category",
                "label": "Workflows",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "workflows/pipeline"
                  },
                  {
                    "type": "doc",
                    "id": "workflows/executions"
                  },
                  {
                    "type": "doc",
                    "id": "workflows/linker"
                  },
                  {
                    "type": "doc",
                    "id": "workflows/observations"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Typical Cambrion API workflows.",
                  "slug": "/category/workflows",
                  "permalink": "/docs/category/workflows"
                }
              },
              {
                "type": "category",
                "label": "Use-cases",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "use-cases/box"
                  },
                  {
                    "type": "doc",
                    "id": "use-cases/invoice"
                  },
                  {
                    "type": "doc",
                    "id": "use-cases/recipe"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Use-cases for Cambrion",
                  "slug": "/category/use-cases",
                  "permalink": "/docs/category/use-cases"
                }
              },
              {
                "type": "category",
                "label": "Integrations",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "integrations/camunda"
                  },
                  {
                    "type": "doc",
                    "id": "integrations/outsystems"
                  },
                  {
                    "type": "doc",
                    "id": "integrations/rest"
                  }
                ],
                "link": {
                  "type": "generated-index",
                  "description": "Integration with Cambrion",
                  "slug": "/category/integrations",
                  "permalink": "/docs/category/integrations"
                }
              }
            ]
          }
        }
      ]
    }
  },
  "docusaurus-plugin-content-blog": {
    "default": {
      "blogSidebarTitle": "Recent posts",
      "blogPosts": [],
      "blogListPaginated": [],
      "blogTags": {},
      "blogTagsListPath": "/blog/tags",
      "blogTagsPaginated": []
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": [
      {
        "type": "mdx",
        "permalink": "/",
        "source": "@site/src/pages/index.md",
        "title": "Cambrion API Documentation",
        "description": "Extracting information from documents is a tedious and error-prone process. It becomes even more complicated and costly when you have custom requirements that exceed of the shelf offerings. At Cambrion we set out to provide a solution that enables custom, low-cost document extraction workflows that can be consumed by a standardized API (TODO: link to API docs).",
        "frontMatter": {
          "title": "Cambrion API Documentation"
        }
      }
    ]
  },
  "docusaurus-plugin-debug": {},
  "docusaurus-plugin-redoc": {
    "plugin-redoc-0": {
      "converted": {
        "openapi": "3.0.3",
        "info": {
          "version": "1.0",
          "title": "Cambrion Execution API",
          "description": "An API to access Cambrion API"
        },
        "tags": [
          {
            "name": "Executions",
            "description": "Execution environment that store results.",
            "externalDocs": {
              "description": "Find out more",
              "url": "http://swagger.io"
            }
          },
          {
            "name": "Pipelines",
            "description": "Machine learning pipelines.",
            "externalDocs": {
              "description": "Find out more about our store",
              "url": "http://swagger.io"
            }
          },
          {
            "name": "Deployments",
            "description": "(TODO) Deployed Pipelines.",
            "externalDocs": {
              "description": "Find out more about our store",
              "url": "http://swagger.io"
            }
          },
          {
            "name": "Indices",
            "description": "Indices",
            "externalDocs": {
              "description": "Find out more about our store",
              "url": "http://swagger.io"
            }
          }
        ],
        "paths": {
          "/executions": {
            "post": {
              "summary": "Creates an execution",
              "description": "Create an execution from an ID (optional).\nIf an execution ID is given that ID will be used, otherwise a new one is created. If the execution already\nexists, it will be ignored and 204 will be returned. If a new execution was created, 200 is returned with\nthe execution ID as body.\n",
              "tags": [
                "Executions"
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/ExecutionRequest"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ExecutionResponse"
                },
                "204": {
                  "description": "Execution existing"
                },
                "400": {
                  "description": "Invalid Execution ID.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "get": {
              "summary": "Gets all executions",
              "tags": [
                "Executions"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionTag"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ExecutionsResponse"
                },
                "400": {
                  "description": "Invalid Execution ID.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            }
          },
          "/executions/{executionId}": {
            "get": {
              "summary": "Gets execution",
              "tags": [
                "Executions"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ExecutionResponse"
                },
                "400": {
                  "description": "Invalid Execution ID.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            }
          },
          "/executions/{executionId}/observation/media": {
            "post": {
              "summary": "Add media to an observation",
              "tags": [
                "Executions"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                }
              ],
              "requestBody": {
                "content": {
                  "image/jpeg": {
                    "schema": {
                      "type": "string",
                      "format": "base64"
                    }
                  },
                  "image/png": {
                    "schema": {
                      "type": "string",
                      "format": "base64"
                    }
                  },
                  "application/pdf": {
                    "schema": {
                      "type": "string",
                      "format": "base64"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/MediaIdResponse"
                },
                "400": {
                  "description": "Bad request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/executions/{executionId}/observation/media/{mediaId}": {
            "get": {
              "summary": "Retrieve a specific media",
              "tags": [
                "Executions"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                },
                {
                  "$ref": "#/components/parameters/MediaId"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/MediaResponse"
                }
              }
            }
          },
          "/executions/{executionId}/observation": {
            "post": {
              "summary": "Merge a raw observation into the current observation",
              "description": "The raw observation is merged into the current observation context.",
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                }
              ],
              "tags": [
                "Executions"
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/Observation"
              },
              "responses": {
                "204": {
                  "description": "Update observation"
                },
                "400": {
                  "description": "Invalid observation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "get": {
              "summary": "Get observation",
              "description": "Get a full observation of the execution.",
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                }
              ],
              "tags": [
                "Executions"
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationResponse"
                },
                "400": {
                  "description": "Bad request",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/executions/{executionId}/observation/transform": {
            "post": {
              "summary": "Transform an observation",
              "description": "Transform a raw observation into an object using a transformer statement",
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                }
              ],
              "tags": [
                "Executions"
              ],
              "requestBody": {
                "description": "A JSONata object to transform an observation into a custom representation. \n[JSONata Documentation](https://docs.jsonata.org/overview.html)\n",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TransformerResponse"
                },
                "400": {
                  "description": "Bad transform object.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/executions/{executionId}/link": {
            "post": {
              "summary": "Link results of an execution",
              "description": "Link contents of observation to documents in an index.",
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                }
              ],
              "tags": [
                "Executions"
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/LinkerRequest"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/LinkerResponse"
                },
                "400": {
                  "description": "Bad linker parameters",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/pipelines": {
            "get": {
              "summary": "Get all deployed pipelines",
              "tags": [
                "Pipelines"
              ],
              "responses": {
                "200": {
                  "description": "Get list of all available pipelines",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pipeline"
                        }
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            }
          },
          "/pipelines/{pipelineId}": {
            "get": {
              "summary": "Get a specific pipeline",
              "tags": [
                "Pipelines"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/PipelineId"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PipelineResponse"
                },
                "400": {
                  "description": "Bad request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/pipelines/{pipelineId}/description": {
            "get": {
              "summary": "Get YAML description of a pipeline",
              "tags": [
                "Pipelines"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/PipelineId"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PipelineDefinitionResponse"
                },
                "400": {
                  "description": "Bad request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/pipelines/{pipelineId}/executeSync": {
            "post": {
              "summary": "Execute pipeline synchronously",
              "tags": [
                "Pipelines"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/PipelineId"
                }
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/PipelineExecutionRequest"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PipelineSyncResponse"
                },
                "400": {
                  "description": "Invalid execution request (i.e. Execution not found!).",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/pipelines/{pipelineId}/executeSync/transform": {
            "post": {
              "summary": "Transform an observation",
              "description": "Transform the output observation of a pipeline directly.\n",
              "parameters": [
                {
                  "$ref": "#/components/parameters/PipelineId"
                }
              ],
              "tags": [
                "Pipelines"
              ],
              "requestBody": {
                "description": "A JSONata object to transform an observation into a custom representation. \n[JSONata Documentation](https://docs.jsonata.org/overview.html)\n",
                "$ref": "#/components/requestBodies/PipelineExecutionRequest"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TransformerResponse"
                },
                "400": {
                  "description": "Bad transform object.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/pipelines/{pipelineId}/executeAsync": {
            "post": {
              "summary": "Execute pipeline asynchronously",
              "tags": [
                "Pipelines"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/PipelineId"
                }
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/PipelineExecutionRequest"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PipelineAsyncResponse"
                }
              }
            }
          },
          "/indices": {
            "get": {
              "summary": "Get all indices",
              "description": "Get a list of all indices.",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexLimit"
                },
                {
                  "$ref": "#/components/parameters/IndexOffset"
                }
              ],
              "responses": {
                "200": {
                  "description": "A list of all indices",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Index"
                        }
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "Create index",
              "description": "Create a new index with an optional schema.",
              "tags": [
                "Indices"
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/IndexRequest"
              },
              "responses": {
                "204": {
                  "description": "Index created"
                },
                "400": {
                  "description": "Invalid invalid request",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            }
          },
          "/indices/{indexId}": {
            "get": {
              "summary": "Get index description",
              "description": "Get the description of an index. Including the data model if present.\n",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexId"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/IndexResponse"
                },
                "400": {
                  "description": "Invalid index ID",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "delete": {
              "summary": "Delete index",
              "description": "Delete an index.",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexId"
                }
              ],
              "responses": {
                "204": {
                  "description": "Index deleted."
                },
                "400": {
                  "description": "Invalid index ID",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/indices/{indexId}/documents": {
            "get": {
              "summary": "Get all documents",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexId"
                },
                {
                  "$ref": "#/components/parameters/DocumentLimit"
                },
                {
                  "$ref": "#/components/parameters/DocumentOffset"
                }
              ],
              "responses": {
                "200": {
                  "description": "A list of all indices",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/IndexedDocument"
                        }
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "Create document",
              "description": "Create a JSON document in an index. If the index does not exist it will be created automatically.\n",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexId"
                }
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/DocumentRequest"
              },
              "responses": {
                "204": {
                  "description": "Document stored successfully"
                },
                "400": {
                  "description": "Invalid index ID",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/indices/{indexId}/documents/{documentId}": {
            "get": {
              "summary": "Get document",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexId"
                },
                {
                  "$ref": "#/components/parameters/DocumentId"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/DocumentResponse"
                },
                "400": {
                  "description": "Invalid index ID or document ID",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "delete": {
              "summary": "Delete document",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexId"
                },
                {
                  "$ref": "#/components/parameters/DocumentId"
                }
              ],
              "responses": {
                "204": {
                  "description": "Document deleted"
                },
                "400": {
                  "description": "Invalid index ID or document ID",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://localhost:8080/"
          }
        ],
        "components": {
          "requestBodies": {
            "PipelineExecutionRequest": {
              "description": "Execution request for a pipeline",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PipelineExecutionObject"
                  }
                }
              }
            },
            "ExecutionRequest": {
              "description": "Execution is the context which holds data related to a specific execution",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Execution"
                  }
                }
              }
            },
            "PipelineRequest": {
              "description": "Pipeline request",
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "pipelineName": {
                        "type": "string"
                      },
                      "pipelineId": {
                        "type": "string"
                      },
                      "pipelineDescription": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  },
                  "encoding": {
                    "pipelineDescription": {
                      "contentType": "application/x-yaml"
                    }
                  }
                }
              }
            },
            "Observation": {
              "description": "Observation request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Observation"
                  }
                }
              }
            },
            "MediaRequest": {
              "description": "Observation request",
              "content": {
                "image/png": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "application/pdf": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "LinkerRequest": {
              "description": "Linker request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EntityLinkerConfig"
                  }
                }
              }
            },
            "IndexRequest": {
              "description": "Index creation request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Index"
                  }
                }
              }
            },
            "DocumentRequest": {
              "description": "Document request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IndexedDocument"
                  }
                }
              }
            }
          },
          "responses": {
            "ExecutionResponse": {
              "description": "Response of an execution",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Execution"
                  }
                }
              }
            },
            "ExecutionsResponse": {
              "description": "Response of an execution",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Execution"
                    }
                  }
                }
              }
            },
            "PipelineResponse": {
              "description": "Response of synchronous pipeline execution",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Pipeline"
                  }
                }
              }
            },
            "PipelineDefinitionResponse": {
              "description": "Pipeline in definition in YAML",
              "content": {
                "application/x-yaml": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "PipelineSyncResponse": {
              "description": "Response of synchronous pipeline execution",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "executionId": {
                        "type": "string"
                      },
                      "observation": {
                        "$ref": "#/components/schemas/Observation"
                      }
                    }
                  }
                }
              }
            },
            "PipelineDeploymentResponse": {
              "description": "Response of pipeline deployment",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "pipelineDeploymentnId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "PipelineAsyncResponse": {
              "description": "Response of asynchronous pipeline execution",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "executionId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "MediaResponse": {
              "description": "Specific media",
              "content": {
                "image/*": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "application/pdf": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "MediaIdResponse": {
              "description": "Update media ID",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "mediaId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "ObservationResponse": {
              "description": "Observation response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Observation"
                  }
                }
              }
            },
            "LinkerResponse": {
              "description": "Linker response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedDocument"
                    }
                  }
                }
              }
            },
            "DocumentResponse": {
              "description": "Document response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IndexedDocument"
                  }
                }
              }
            },
            "TransformerResponse": {
              "description": "Response of after transformation. The output can be an arbitrary object created by a JSONata\nexpression. It must be deserialized.\n",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "IndexResponse": {
              "description": "Response of after transformation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Index"
                  }
                }
              }
            },
            "NotFound": {
              "description": "The specified resource was not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "Unauthorized": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "parameters": {
            "PipelineId": {
              "name": "pipelineId",
              "in": "path",
              "description": "ID of the pipeline to execute",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "DeploymentId": {
              "name": "deploymentId",
              "in": "path",
              "description": "ID of the pipeline deployment",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "ExecutionId": {
              "name": "executionId",
              "in": "path",
              "description": "ID of an execution",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "MediaId": {
              "name": "mediaId",
              "in": "path",
              "description": "ID of uploaded media",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "IndexId": {
              "name": "indexId",
              "in": "path",
              "description": "ID of the index",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "Warehouse-Index"
            },
            "DocumentId": {
              "name": "documentId",
              "in": "path",
              "description": "ID of a document",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "ExecutionTag": {
              "name": "tag",
              "in": "query",
              "description": "Filter executions by tag",
              "schema": {
                "type": "string"
              }
            },
            "IndexLimit": {
              "name": "limit",
              "in": "query",
              "description": "Limits the number of indices on a page",
              "schema": {
                "type": "integer"
              }
            },
            "IndexOffset": {
              "name": "offset",
              "in": "query",
              "description": "Specifies the page number of the indices to be displayed",
              "schema": {
                "type": "integer"
              }
            },
            "DocumentLimit": {
              "name": "limit",
              "in": "query",
              "description": "Limits the number of documents on a page",
              "schema": {
                "type": "integer"
              }
            },
            "DocumentOffset": {
              "name": "offset",
              "in": "query",
              "description": "Specifies the page number of the documents to be displayed",
              "schema": {
                "type": "integer"
              }
            }
          },
          "schemas": {
            "Pipeline": {
              "type": "object",
              "properties": {
                "pipelineName": {
                  "type": "string"
                },
                "pipelineId": {
                  "type": "string"
                },
                "pipelineDefinitionId": {
                  "type": "string"
                },
                "pipelineDescription": {
                  "type": "string"
                }
              }
            },
            "Execution": {
              "type": "object",
              "description": "The execution is a stateful environment\nin which media (such as images or PDF files) can be stored an used an inputs for pipelines. The ID\nin the request body is optional (generated if empty) and must be unique.\n",
              "properties": {
                "executionId": {
                  "type": "string",
                  "description": "ID of the execution"
                },
                "tag": {
                  "type": "string",
                  "description": "Tag to identify the execution"
                },
                "createdAt": {
                  "type": "string",
                  "description": "Creation time"
                },
                "metaData": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            },
            "PipelineExecutionObject": {
              "type": "object",
              "description": "The execution is a stateful environment\nin which media (such as images or PDF files) can be stored an used an inputs for pipelines. The ID\nin the request body is optional (generated if empty) and must be unique. Nothing will be persisted \nif transient is true. In order to trigger the pipeline either an execution ID containing valid media or base 64 encoded \nmedia under the media property have to be provided.\n",
              "properties": {
                "executionId": {
                  "type": "string",
                  "description": "ID of the execution"
                },
                "tag": {
                  "type": "string",
                  "description": "Tag used to identify the resulting execution. Ignored if transient is true."
                },
                "transient": {
                  "type": "boolean",
                  "description": "Whether to delete all execution data after pipeline completion"
                },
                "transform": {
                  "type": "string"
                },
                "media": {
                  "description": "Array of base 64 encoded media files. Content type will be detected automatically.",
                  "items": {
                    "type": "string",
                    "format": "base64"
                  },
                  "type": "array"
                }
              }
            },
            "EntityLinkerConfig": {
              "properties": {
                "group": {
                  "items": {
                    "$ref": "#/components/schemas/MatchGroup"
                  },
                  "type": "array"
                },
                "document": {
                  "type": "object",
                  "additionalProperties": true
                },
                "topk": {
                  "items": {
                    "$ref": "#/components/schemas/TopKIndexFilter"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "title": "Entity Link Request"
            },
            "Index": {
              "type": "object",
              "properties": {
                "indexId": {
                  "type": "string"
                },
                "indexSchema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            },
            "IndexedDocument": {
              "type": "object",
              "properties": {
                "indexId": {
                  "type": "string"
                },
                "source": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            },
            "Block": {
              "required": [
                "text",
                "geometry"
              ],
              "properties": {
                "text": {
                  "type": "string"
                },
                "geometry": {
                  "$ref": "#/components/schemas/Geometry"
                }
              },
              "type": "object",
              "title": "Block"
            },
            "BoundingBox": {
              "required": [
                "width",
                "height",
                "left",
                "top"
              ],
              "properties": {
                "width": {
                  "type": "number"
                },
                "height": {
                  "type": "number"
                },
                "left": {
                  "type": "number"
                },
                "top": {
                  "type": "number"
                }
              },
              "type": "object",
              "title": "Bounding Box"
            },
            "Code": {
              "required": [
                "id",
                "entity",
                "payload",
                "type"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "entity": {
                  "$ref": "#/components/schemas/Entity"
                },
                "tag": {
                  "type": "string"
                },
                "payload": {
                  "type": "string",
                  "format": "binary"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "UPC_A",
                    "UPC_E",
                    "EAN_8",
                    "EAN_13",
                    "UPC_EAN_EXTENSION",
                    "CODE_39",
                    "CODE_93",
                    "CODE_128",
                    "CODEBAR",
                    "ITF",
                    "QR_CODE",
                    "DATA_MATRIX",
                    "AZTEC",
                    "PDF_417",
                    "MAXICODE",
                    "RSS_14",
                    "RSS_EXPANDED"
                  ],
                  "title": "Code Type"
                }
              },
              "type": "object",
              "title": "Code entity"
            },
            "Collection": {
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "type": "string",
                  "enum": [
                    "ENTITY_TEXT",
                    "ENTITY_VALUE",
                    "ENTITY_DATA",
                    "KEY_VALUE",
                    "KEY_DATA",
                    "KEY_TEXT",
                    "VALUE_TEXT",
                    "VALUE_VALUE",
                    "VALUE_DATA",
                    "TABLE_CELL_ROW_TAG",
                    "CODE"
                  ],
                  "title": "Collection Source"
                }
              },
              "type": "object",
              "title": "Collection"
            },
            "Document": {
              "properties": {
                "tables": {
                  "items": {
                    "$ref": "#/components/schemas/Table"
                  },
                  "type": "array"
                },
                "entities": {
                  "items": {
                    "$ref": "#/components/schemas/Entity"
                  },
                  "type": "array"
                },
                "keyValueSet": {
                  "$ref": "#/components/schemas/KeyValueSet"
                }
              },
              "type": "object",
              "title": "Document"
            },
            "DocumentPage": {
              "required": [
                "page",
                "document"
              ],
              "properties": {
                "page": {
                  "type": "integer"
                },
                "document": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "type": "object",
              "title": "Document page"
            },
            "Entity": {
              "required": [
                "id",
                "block",
                "confidence"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "block": {
                  "$ref": "#/components/schemas/Block"
                },
                "confidence": {
                  "type": "number"
                },
                "label": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "STRING",
                    "NUMBER",
                    "QUANTITY",
                    "UNIT",
                    "DATE",
                    "PERCENTAGE"
                  ],
                  "title": "Entity Type"
                },
                "data": {
                  "$ref": "#/components/schemas/EntityData"
                },
                "embedding": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "similarity": {
                  "$ref": "#/components/schemas/EntitySimilarity"
                },
                "layoutType": {
                  "type": "string",
                  "enum": [
                    "WORD",
                    "LINE"
                  ],
                  "title": "Entity Layout Type"
                }
              },
              "type": "object",
              "title": "Entity"
            },
            "EntityData": {
              "properties": {
                "documentId": {
                  "type": "string"
                },
                "textValue": {
                  "type": "string"
                },
                "quantityValue": {
                  "type": "integer"
                },
                "numberValue": {
                  "type": "number"
                },
                "unitValue": {
                  "type": "string"
                },
                "dateValue": {
                  "type": "string",
                  "format": "date-time"
                },
                "textData": {
                  "type": "string"
                },
                "quantityData": {
                  "type": "integer"
                },
                "numberData": {
                  "type": "number"
                },
                "unitData": {
                  "type": "string"
                },
                "dateData": {
                  "type": "string",
                  "format": "date-time"
                },
                "field": {
                  "type": "string"
                },
                "score": {
                  "type": "number"
                },
                "sourceIndex": {
                  "type": "string"
                }
              },
              "type": "object",
              "title": "Entity Data"
            },
            "EntityFilter": {
              "properties": {
                "tag": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "regExp": {
                  "type": "string"
                },
                "hasData": {
                  "type": "boolean"
                },
                "hasValue": {
                  "type": "boolean"
                },
                "layoutType": {
                  "type": "string",
                  "enum": [
                    "WORD",
                    "LINE"
                  ],
                  "title": "Entity Layout Type"
                }
              },
              "type": "object",
              "title": "Entity Filter"
            },
            "EntitySimilarity": {
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "TEXT_SIM",
                    "NUMBER_DIFF",
                    "BOOL_SAME"
                  ],
                  "title": "Similarity Type"
                },
                "cosineSimilarity": {
                  "type": "number"
                },
                "amountDiff": {
                  "type": "integer"
                },
                "numberDiff": {
                  "type": "number"
                },
                "same": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "title": "Entity Similarity"
            },
            "Geometry": {
              "required": [
                "boundingBox"
              ],
              "properties": {
                "polygon": {
                  "$ref": "#/components/schemas/Polygon"
                },
                "boundingBox": {
                  "$ref": "#/components/schemas/BoundingBox"
                }
              },
              "type": "object",
              "title": "Geometry"
            },
            "ImageContent": {
              "required": [
                "id",
                "mediaId"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "mediaId": {
                  "type": "string"
                },
                "documentPages": {
                  "items": {
                    "$ref": "#/components/schemas/DocumentPage"
                  },
                  "type": "array"
                },
                "imageHash": {
                  "type": "string"
                },
                "codes": {
                  "items": {
                    "$ref": "#/components/schemas/Code"
                  },
                  "type": "array"
                },
                "metaData": {
                  "$ref": "#/components/schemas/ImageMetaData"
                },
                "label": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "type": "object",
              "title": "Image Content"
            },
            "TextContent": {
              "required": [
                "id",
                "mediaId"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "mediaId": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                },
                "label": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "type": "object",
              "title": "Text Content"
            },
            "ImageMetaData": {
              "required": [
                "width",
                "height"
              ],
              "properties": {
                "width": {
                  "type": "integer"
                },
                "height": {
                  "type": "integer"
                }
              },
              "type": "object",
              "title": "Image Meta Data"
            },
            "Observation": {
              "required": [
                "executionId"
              ],
              "properties": {
                "executionId": {
                  "type": "string"
                },
                "imageContents": {
                  "items": {
                    "$ref": "#/components/schemas/ImageContent"
                  },
                  "type": "array"
                },
                "textContents": {
                  "items": {
                    "$ref": "#/components/schemas/TextContent"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "title": "Execution Observation"
            },
            "KeyValuePair": {
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "$ref": "#/components/schemas/Entity"
                },
                "entityValue": {
                  "$ref": "#/components/schemas/Entity"
                },
                "keyValueSetValue": {
                  "$ref": "#/components/schemas/KeyValueSet"
                },
                "tableValue": {
                  "$ref": "#/components/schemas/Table"
                },
                "tag": {
                  "type": "string"
                }
              },
              "type": "object",
              "title": "Key Value Pair"
            },
            "KeyValueSet": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "tag": {
                  "type": "string"
                },
                "pairs": {
                  "items": {
                    "$ref": "#/components/schemas/KeyValuePair"
                  },
                  "type": "array"
                },
                "entity": {
                  "$ref": "#/components/schemas/Entity"
                }
              },
              "type": "object",
              "title": "Key Value Set"
            },
            "Label": {
              "required": [
                "index",
                "name",
                "confidence"
              ],
              "properties": {
                "index": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "confidence": {
                  "type": "number"
                }
              },
              "type": "object",
              "title": "Label"
            },
            "MatchField": {
              "required": [
                "fieldName",
                "clause",
                "collection",
                "mode"
              ],
              "properties": {
                "fieldName": {
                  "type": "string"
                },
                "clause": {
                  "type": "string",
                  "enum": [
                    "MUST",
                    "MUST_NOT",
                    "SHOULD",
                    "FILTER"
                  ],
                  "title": "Bool Clause"
                },
                "fuzziness": {
                  "type": "integer"
                },
                "auto": {
                  "type": "string"
                },
                "filter": {
                  "$ref": "#/components/schemas/EntityFilter"
                },
                "collection": {
                  "$ref": "#/components/schemas/Collection"
                },
                "threshold": {
                  "type": "number"
                },
                "num_results": {
                  "type": "integer"
                },
                "mode": {
                  "type": "string",
                  "enum": [
                    "SEARCH",
                    "COMPARE",
                    "SEARCH_COMPARE"
                  ],
                  "title": "Field Mode"
                },
                "dimension": {
                  "type": "string",
                  "enum": [
                    "EMPTY",
                    "ENTITY",
                    "TABLE_ROW"
                  ],
                  "title": "Query Dimension"
                },
                "analyzer": {
                  "type": "string"
                }
              },
              "type": "object",
              "title": "Match Field"
            },
            "MatchGroup": {
              "required": [
                "tag",
                "index"
              ],
              "properties": {
                "tag": {
                  "type": "string"
                },
                "fields": {
                  "items": {
                    "$ref": "#/components/schemas/MatchField"
                  },
                  "type": "array"
                },
                "index": {
                  "type": "string"
                }
              },
              "type": "object",
              "title": "Match Group"
            },
            "Point": {
              "required": [
                "x",
                "y"
              ],
              "properties": {
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              },
              "type": "object",
              "title": "Point"
            },
            "Polygon": {
              "properties": {
                "points": {
                  "items": {
                    "$ref": "#/components/schemas/Point"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "title": "Polygon"
            },
            "Table": {
              "required": [
                "id",
                "entity"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "entity": {
                  "$ref": "#/components/schemas/Entity"
                },
                "tag": {
                  "type": "string"
                },
                "headers": {
                  "items": {
                    "$ref": "#/components/schemas/Entity"
                  },
                  "type": "array"
                },
                "rows": {
                  "items": {
                    "$ref": "#/components/schemas/KeyValueSet"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "title": "Table"
            },
            "TopKIndexFilter": {
              "required": [
                "index",
                "topk"
              ],
              "properties": {
                "index": {
                  "type": "string"
                },
                "topk": {
                  "type": "integer"
                }
              },
              "type": "object",
              "title": "Top K Index Filter"
            },
            "LinkedDocument": {
              "required": [
                "tag"
              ],
              "properties": {
                "document": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "fields": {
                  "items": {
                    "$ref": "#/components/schemas/LinkedField"
                  },
                  "type": "array"
                },
                "tag": {
                  "type": "string"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "title": "Linked Document"
            },
            "Error": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "LinkedField": {
              "required": [
                "fieldName"
              ],
              "properties": {
                "documentId": {
                  "type": "string"
                },
                "index": {
                  "type": "string"
                },
                "score": {
                  "type": "number"
                },
                "fieldName": {
                  "type": "string"
                },
                "textValue": {
                  "type": "string"
                },
                "quantityValue": {
                  "type": "integer"
                },
                "numberValue": {
                  "type": "number"
                },
                "unitValue": {
                  "type": "string"
                },
                "dateValue": {
                  "type": "string",
                  "format": "date-time"
                },
                "textData": {
                  "type": "string"
                },
                "quantityData": {
                  "type": "integer"
                },
                "numberData": {
                  "type": "number"
                },
                "unitData": {
                  "type": "string"
                },
                "dateData": {
                  "type": "string",
                  "format": "date-time"
                },
                "cosineSimilarity": {
                  "type": "number"
                },
                "quantityDiff": {
                  "type": "integer"
                },
                "numberDiff": {
                  "type": "number"
                },
                "same": {
                  "type": "boolean"
                },
                "entityId": {
                  "type": "string"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "title": "Linked Field"
            }
          },
          "securitySchemes": {
            "api_key": {
              "type": "apiKey",
              "name": "api_key",
              "in": "header"
            }
          }
        }
      },
      "bundle": {
        "openapi": "3.0.3",
        "info": {
          "version": "1.0",
          "title": "Cambrion Execution API",
          "description": "An API to access Cambrion API"
        },
        "tags": [
          {
            "name": "Executions",
            "description": "Execution environment that store results.",
            "externalDocs": {
              "description": "Find out more",
              "url": "http://swagger.io"
            }
          },
          {
            "name": "Pipelines",
            "description": "Machine learning pipelines.",
            "externalDocs": {
              "description": "Find out more about our store",
              "url": "http://swagger.io"
            }
          },
          {
            "name": "Deployments",
            "description": "(TODO) Deployed Pipelines.",
            "externalDocs": {
              "description": "Find out more about our store",
              "url": "http://swagger.io"
            }
          },
          {
            "name": "Indices",
            "description": "Indices",
            "externalDocs": {
              "description": "Find out more about our store",
              "url": "http://swagger.io"
            }
          }
        ],
        "paths": {
          "/executions": {
            "post": {
              "summary": "Creates an execution",
              "description": "Create an execution from an ID (optional).\nIf an execution ID is given that ID will be used, otherwise a new one is created. If the execution already\nexists, it will be ignored and 204 will be returned. If a new execution was created, 200 is returned with\nthe execution ID as body.\n",
              "tags": [
                "Executions"
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/ExecutionRequest"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ExecutionResponse"
                },
                "204": {
                  "description": "Execution existing"
                },
                "400": {
                  "description": "Invalid Execution ID.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            },
            "get": {
              "summary": "Gets all executions",
              "tags": [
                "Executions"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionTag"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ExecutionsResponse"
                },
                "400": {
                  "description": "Invalid Execution ID.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            }
          },
          "/executions/{executionId}": {
            "get": {
              "summary": "Gets execution",
              "tags": [
                "Executions"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ExecutionResponse"
                },
                "400": {
                  "description": "Invalid Execution ID.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            }
          },
          "/executions/{executionId}/observation/media": {
            "post": {
              "summary": "Add media to an observation",
              "tags": [
                "Executions"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                }
              ],
              "requestBody": {
                "content": {
                  "image/jpeg": {
                    "schema": {
                      "type": "string",
                      "format": "base64"
                    }
                  },
                  "image/png": {
                    "schema": {
                      "type": "string",
                      "format": "base64"
                    }
                  },
                  "application/pdf": {
                    "schema": {
                      "type": "string",
                      "format": "base64"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/MediaIdResponse"
                },
                "400": {
                  "description": "Bad request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/executions/{executionId}/observation/media/{mediaId}": {
            "get": {
              "summary": "Retrieve a specific media",
              "tags": [
                "Executions"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                },
                {
                  "$ref": "#/components/parameters/MediaId"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/MediaResponse"
                }
              }
            }
          },
          "/executions/{executionId}/observation": {
            "post": {
              "summary": "Merge a raw observation into the current observation",
              "description": "The raw observation is merged into the current observation context.",
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                }
              ],
              "tags": [
                "Executions"
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/Observation"
              },
              "responses": {
                "204": {
                  "description": "Update observation"
                },
                "400": {
                  "description": "Invalid observation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "get": {
              "summary": "Get observation",
              "description": "Get a full observation of the execution.",
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                }
              ],
              "tags": [
                "Executions"
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/ObservationResponse"
                },
                "400": {
                  "description": "Bad request",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/executions/{executionId}/observation/transform": {
            "post": {
              "summary": "Transform an observation",
              "description": "Transform a raw observation into an object using a transformer statement",
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                }
              ],
              "tags": [
                "Executions"
              ],
              "requestBody": {
                "description": "A JSONata object to transform an observation into a custom representation. \n[JSONata Documentation](https://docs.jsonata.org/overview.html)\n",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string"
                    }
                  }
                }
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TransformerResponse"
                },
                "400": {
                  "description": "Bad transform object.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/executions/{executionId}/link": {
            "post": {
              "summary": "Link results of an execution",
              "description": "Link contents of observation to documents in an index.",
              "parameters": [
                {
                  "$ref": "#/components/parameters/ExecutionId"
                }
              ],
              "tags": [
                "Executions"
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/LinkerRequest"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/LinkerResponse"
                },
                "400": {
                  "description": "Bad linker parameters",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/pipelines": {
            "get": {
              "summary": "Get all deployed pipelines",
              "tags": [
                "Pipelines"
              ],
              "responses": {
                "200": {
                  "description": "Get list of all available pipelines",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pipeline"
                        }
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            }
          },
          "/pipelines/{pipelineId}": {
            "get": {
              "summary": "Get a specific pipeline",
              "tags": [
                "Pipelines"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/PipelineId"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PipelineResponse"
                },
                "400": {
                  "description": "Bad request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/pipelines/{pipelineId}/description": {
            "get": {
              "summary": "Get YAML description of a pipeline",
              "tags": [
                "Pipelines"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/PipelineId"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PipelineDefinitionResponse"
                },
                "400": {
                  "description": "Bad request.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/pipelines/{pipelineId}/executeSync": {
            "post": {
              "summary": "Execute pipeline synchronously",
              "tags": [
                "Pipelines"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/PipelineId"
                }
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/PipelineExecutionRequest"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PipelineSyncResponse"
                },
                "400": {
                  "description": "Invalid execution request (i.e. Execution not found!).",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/pipelines/{pipelineId}/executeSync/transform": {
            "post": {
              "summary": "Transform an observation",
              "description": "Transform the output observation of a pipeline directly.\n",
              "parameters": [
                {
                  "$ref": "#/components/parameters/PipelineId"
                }
              ],
              "tags": [
                "Pipelines"
              ],
              "requestBody": {
                "description": "A JSONata object to transform an observation into a custom representation. \n[JSONata Documentation](https://docs.jsonata.org/overview.html)\n",
                "$ref": "#/components/requestBodies/PipelineExecutionRequest"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/TransformerResponse"
                },
                "400": {
                  "description": "Bad transform object.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/pipelines/{pipelineId}/executeAsync": {
            "post": {
              "summary": "Execute pipeline asynchronously",
              "tags": [
                "Pipelines"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/PipelineId"
                }
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/PipelineExecutionRequest"
              },
              "responses": {
                "200": {
                  "$ref": "#/components/responses/PipelineAsyncResponse"
                }
              }
            }
          },
          "/indices": {
            "get": {
              "summary": "Get all indices",
              "description": "Get a list of all indices.",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexLimit"
                },
                {
                  "$ref": "#/components/parameters/IndexOffset"
                }
              ],
              "responses": {
                "200": {
                  "description": "A list of all indices",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Index"
                        }
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "Create index",
              "description": "Create a new index with an optional schema.",
              "tags": [
                "Indices"
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/IndexRequest"
              },
              "responses": {
                "204": {
                  "description": "Index created"
                },
                "400": {
                  "description": "Invalid invalid request",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                }
              }
            }
          },
          "/indices/{indexId}": {
            "get": {
              "summary": "Get index description",
              "description": "Get the description of an index. Including the data model if present.\n",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexId"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/IndexResponse"
                },
                "400": {
                  "description": "Invalid index ID",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "delete": {
              "summary": "Delete index",
              "description": "Delete an index.",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexId"
                }
              ],
              "responses": {
                "204": {
                  "description": "Index deleted."
                },
                "400": {
                  "description": "Invalid index ID",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/indices/{indexId}/documents": {
            "get": {
              "summary": "Get all documents",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexId"
                },
                {
                  "$ref": "#/components/parameters/DocumentLimit"
                },
                {
                  "$ref": "#/components/parameters/DocumentOffset"
                }
              ],
              "responses": {
                "200": {
                  "description": "A list of all indices",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/IndexedDocument"
                        }
                      }
                    }
                  }
                }
              }
            },
            "post": {
              "summary": "Create document",
              "description": "Create a JSON document in an index. If the index does not exist it will be created automatically.\n",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexId"
                }
              ],
              "requestBody": {
                "$ref": "#/components/requestBodies/DocumentRequest"
              },
              "responses": {
                "204": {
                  "description": "Document stored successfully"
                },
                "400": {
                  "description": "Invalid index ID",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          },
          "/indices/{indexId}/documents/{documentId}": {
            "get": {
              "summary": "Get document",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexId"
                },
                {
                  "$ref": "#/components/parameters/DocumentId"
                }
              ],
              "responses": {
                "200": {
                  "$ref": "#/components/responses/DocumentResponse"
                },
                "400": {
                  "description": "Invalid index ID or document ID",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            },
            "delete": {
              "summary": "Delete document",
              "tags": [
                "Indices"
              ],
              "parameters": [
                {
                  "$ref": "#/components/parameters/IndexId"
                },
                {
                  "$ref": "#/components/parameters/DocumentId"
                }
              ],
              "responses": {
                "204": {
                  "description": "Document deleted"
                },
                "400": {
                  "description": "Invalid index ID or document ID",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Error"
                      }
                    }
                  }
                },
                "401": {
                  "$ref": "#/components/responses/Unauthorized"
                },
                "404": {
                  "$ref": "#/components/responses/NotFound"
                }
              }
            }
          }
        },
        "servers": [
          {
            "url": "http://localhost:8080/"
          }
        ],
        "components": {
          "requestBodies": {
            "PipelineExecutionRequest": {
              "description": "Execution request for a pipeline",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/PipelineExecutionObject"
                  }
                }
              }
            },
            "ExecutionRequest": {
              "description": "Execution is the context which holds data related to a specific execution",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Execution"
                  }
                }
              }
            },
            "PipelineRequest": {
              "description": "Pipeline request",
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "pipelineName": {
                        "type": "string"
                      },
                      "pipelineId": {
                        "type": "string"
                      },
                      "pipelineDescription": {
                        "type": "object",
                        "additionalProperties": true
                      }
                    }
                  },
                  "encoding": {
                    "pipelineDescription": {
                      "contentType": "application/x-yaml"
                    }
                  }
                }
              }
            },
            "Observation": {
              "description": "Observation request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Observation"
                  }
                }
              }
            },
            "MediaRequest": {
              "description": "Observation request",
              "content": {
                "image/png": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "application/pdf": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "LinkerRequest": {
              "description": "Linker request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EntityLinkerConfig"
                  }
                }
              }
            },
            "IndexRequest": {
              "description": "Index creation request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Index"
                  }
                }
              }
            },
            "DocumentRequest": {
              "description": "Document request",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IndexedDocument"
                  }
                }
              }
            }
          },
          "responses": {
            "ExecutionResponse": {
              "description": "Response of an execution",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Execution"
                  }
                }
              }
            },
            "ExecutionsResponse": {
              "description": "Response of an execution",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Execution"
                    }
                  }
                }
              }
            },
            "PipelineResponse": {
              "description": "Response of synchronous pipeline execution",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Pipeline"
                  }
                }
              }
            },
            "PipelineDefinitionResponse": {
              "description": "Pipeline in definition in YAML",
              "content": {
                "application/x-yaml": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "PipelineSyncResponse": {
              "description": "Response of synchronous pipeline execution",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "executionId": {
                        "type": "string"
                      },
                      "observation": {
                        "$ref": "#/components/schemas/Observation"
                      }
                    }
                  }
                }
              }
            },
            "PipelineDeploymentResponse": {
              "description": "Response of pipeline deployment",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "pipelineDeploymentnId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "PipelineAsyncResponse": {
              "description": "Response of asynchronous pipeline execution",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "executionId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "MediaResponse": {
              "description": "Specific media",
              "content": {
                "image/*": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "application/pdf": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "MediaIdResponse": {
              "description": "Update media ID",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "mediaId": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "ObservationResponse": {
              "description": "Observation response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Observation"
                  }
                }
              }
            },
            "LinkerResponse": {
              "description": "Linker response",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LinkedDocument"
                    }
                  }
                }
              }
            },
            "DocumentResponse": {
              "description": "Document response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/IndexedDocument"
                  }
                }
              }
            },
            "TransformerResponse": {
              "description": "Response of after transformation. The output can be an arbitrary object created by a JSONata\nexpression. It must be deserialized.\n",
              "content": {
                "text/plain": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            },
            "IndexResponse": {
              "description": "Response of after transformation",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Index"
                  }
                }
              }
            },
            "NotFound": {
              "description": "The specified resource was not found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "Unauthorized": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "parameters": {
            "PipelineId": {
              "name": "pipelineId",
              "in": "path",
              "description": "ID of the pipeline to execute",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "DeploymentId": {
              "name": "deploymentId",
              "in": "path",
              "description": "ID of the pipeline deployment",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "ExecutionId": {
              "name": "executionId",
              "in": "path",
              "description": "ID of an execution",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "MediaId": {
              "name": "mediaId",
              "in": "path",
              "description": "ID of uploaded media",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "IndexId": {
              "name": "indexId",
              "in": "path",
              "description": "ID of the index",
              "required": true,
              "schema": {
                "type": "string"
              },
              "example": "Warehouse-Index"
            },
            "DocumentId": {
              "name": "documentId",
              "in": "path",
              "description": "ID of a document",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            "ExecutionTag": {
              "name": "tag",
              "in": "query",
              "description": "Filter executions by tag",
              "schema": {
                "type": "string"
              }
            },
            "IndexLimit": {
              "name": "limit",
              "in": "query",
              "description": "Limits the number of indices on a page",
              "schema": {
                "type": "integer"
              }
            },
            "IndexOffset": {
              "name": "offset",
              "in": "query",
              "description": "Specifies the page number of the indices to be displayed",
              "schema": {
                "type": "integer"
              }
            },
            "DocumentLimit": {
              "name": "limit",
              "in": "query",
              "description": "Limits the number of documents on a page",
              "schema": {
                "type": "integer"
              }
            },
            "DocumentOffset": {
              "name": "offset",
              "in": "query",
              "description": "Specifies the page number of the documents to be displayed",
              "schema": {
                "type": "integer"
              }
            }
          },
          "schemas": {
            "Pipeline": {
              "type": "object",
              "properties": {
                "pipelineName": {
                  "type": "string"
                },
                "pipelineId": {
                  "type": "string"
                },
                "pipelineDefinitionId": {
                  "type": "string"
                },
                "pipelineDescription": {
                  "type": "string"
                }
              }
            },
            "Execution": {
              "type": "object",
              "description": "The execution is a stateful environment\nin which media (such as images or PDF files) can be stored an used an inputs for pipelines. The ID\nin the request body is optional (generated if empty) and must be unique.\n",
              "properties": {
                "executionId": {
                  "type": "string",
                  "description": "ID of the execution"
                },
                "tag": {
                  "type": "string",
                  "description": "Tag to identify the execution"
                },
                "createdAt": {
                  "type": "string",
                  "description": "Creation time"
                },
                "metaData": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            },
            "PipelineExecutionObject": {
              "type": "object",
              "description": "The execution is a stateful environment\nin which media (such as images or PDF files) can be stored an used an inputs for pipelines. The ID\nin the request body is optional (generated if empty) and must be unique. Nothing will be persisted \nif transient is true. In order to trigger the pipeline either an execution ID containing valid media or base 64 encoded \nmedia under the media property have to be provided.\n",
              "properties": {
                "executionId": {
                  "type": "string",
                  "description": "ID of the execution"
                },
                "tag": {
                  "type": "string",
                  "description": "Tag used to identify the resulting execution. Ignored if transient is true."
                },
                "transient": {
                  "type": "boolean",
                  "description": "Whether to delete all execution data after pipeline completion"
                },
                "transform": {
                  "type": "string"
                },
                "media": {
                  "description": "Array of base 64 encoded media files. Content type will be detected automatically.",
                  "items": {
                    "type": "string",
                    "format": "base64"
                  },
                  "type": "array"
                }
              }
            },
            "EntityLinkerConfig": {
              "properties": {
                "group": {
                  "items": {
                    "$ref": "#/components/schemas/MatchGroup"
                  },
                  "type": "array"
                },
                "document": {
                  "type": "object",
                  "additionalProperties": true
                },
                "topk": {
                  "items": {
                    "$ref": "#/components/schemas/TopKIndexFilter"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "title": "Entity Link Request"
            },
            "Index": {
              "type": "object",
              "properties": {
                "indexId": {
                  "type": "string"
                },
                "indexSchema": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            },
            "IndexedDocument": {
              "type": "object",
              "properties": {
                "indexId": {
                  "type": "string"
                },
                "source": {
                  "type": "object",
                  "additionalProperties": true
                }
              }
            },
            "Block": {
              "required": [
                "text",
                "geometry"
              ],
              "properties": {
                "text": {
                  "type": "string"
                },
                "geometry": {
                  "$ref": "#/components/schemas/Geometry"
                }
              },
              "type": "object",
              "title": "Block"
            },
            "BoundingBox": {
              "required": [
                "width",
                "height",
                "left",
                "top"
              ],
              "properties": {
                "width": {
                  "type": "number"
                },
                "height": {
                  "type": "number"
                },
                "left": {
                  "type": "number"
                },
                "top": {
                  "type": "number"
                }
              },
              "type": "object",
              "title": "Bounding Box"
            },
            "Code": {
              "required": [
                "id",
                "entity",
                "payload",
                "type"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "entity": {
                  "$ref": "#/components/schemas/Entity"
                },
                "tag": {
                  "type": "string"
                },
                "payload": {
                  "type": "string",
                  "format": "binary"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "UPC_A",
                    "UPC_E",
                    "EAN_8",
                    "EAN_13",
                    "UPC_EAN_EXTENSION",
                    "CODE_39",
                    "CODE_93",
                    "CODE_128",
                    "CODEBAR",
                    "ITF",
                    "QR_CODE",
                    "DATA_MATRIX",
                    "AZTEC",
                    "PDF_417",
                    "MAXICODE",
                    "RSS_14",
                    "RSS_EXPANDED"
                  ],
                  "title": "Code Type"
                }
              },
              "type": "object",
              "title": "Code entity"
            },
            "Collection": {
              "required": [
                "source"
              ],
              "properties": {
                "source": {
                  "type": "string",
                  "enum": [
                    "ENTITY_TEXT",
                    "ENTITY_VALUE",
                    "ENTITY_DATA",
                    "KEY_VALUE",
                    "KEY_DATA",
                    "KEY_TEXT",
                    "VALUE_TEXT",
                    "VALUE_VALUE",
                    "VALUE_DATA",
                    "TABLE_CELL_ROW_TAG",
                    "CODE"
                  ],
                  "title": "Collection Source"
                }
              },
              "type": "object",
              "title": "Collection"
            },
            "Document": {
              "properties": {
                "tables": {
                  "items": {
                    "$ref": "#/components/schemas/Table"
                  },
                  "type": "array"
                },
                "entities": {
                  "items": {
                    "$ref": "#/components/schemas/Entity"
                  },
                  "type": "array"
                },
                "keyValueSet": {
                  "$ref": "#/components/schemas/KeyValueSet"
                }
              },
              "type": "object",
              "title": "Document"
            },
            "DocumentPage": {
              "required": [
                "page",
                "document"
              ],
              "properties": {
                "page": {
                  "type": "integer"
                },
                "document": {
                  "$ref": "#/components/schemas/Document"
                }
              },
              "type": "object",
              "title": "Document page"
            },
            "Entity": {
              "required": [
                "id",
                "block",
                "confidence"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "block": {
                  "$ref": "#/components/schemas/Block"
                },
                "confidence": {
                  "type": "number"
                },
                "label": {
                  "type": "string"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "STRING",
                    "NUMBER",
                    "QUANTITY",
                    "UNIT",
                    "DATE",
                    "PERCENTAGE"
                  ],
                  "title": "Entity Type"
                },
                "data": {
                  "$ref": "#/components/schemas/EntityData"
                },
                "embedding": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "similarity": {
                  "$ref": "#/components/schemas/EntitySimilarity"
                },
                "layoutType": {
                  "type": "string",
                  "enum": [
                    "WORD",
                    "LINE"
                  ],
                  "title": "Entity Layout Type"
                }
              },
              "type": "object",
              "title": "Entity"
            },
            "EntityData": {
              "properties": {
                "documentId": {
                  "type": "string"
                },
                "textValue": {
                  "type": "string"
                },
                "quantityValue": {
                  "type": "integer"
                },
                "numberValue": {
                  "type": "number"
                },
                "unitValue": {
                  "type": "string"
                },
                "dateValue": {
                  "type": "string",
                  "format": "date-time"
                },
                "textData": {
                  "type": "string"
                },
                "quantityData": {
                  "type": "integer"
                },
                "numberData": {
                  "type": "number"
                },
                "unitData": {
                  "type": "string"
                },
                "dateData": {
                  "type": "string",
                  "format": "date-time"
                },
                "field": {
                  "type": "string"
                },
                "score": {
                  "type": "number"
                },
                "sourceIndex": {
                  "type": "string"
                }
              },
              "type": "object",
              "title": "Entity Data"
            },
            "EntityFilter": {
              "properties": {
                "tag": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                },
                "regExp": {
                  "type": "string"
                },
                "hasData": {
                  "type": "boolean"
                },
                "hasValue": {
                  "type": "boolean"
                },
                "layoutType": {
                  "type": "string",
                  "enum": [
                    "WORD",
                    "LINE"
                  ],
                  "title": "Entity Layout Type"
                }
              },
              "type": "object",
              "title": "Entity Filter"
            },
            "EntitySimilarity": {
              "required": [
                "type"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "TEXT_SIM",
                    "NUMBER_DIFF",
                    "BOOL_SAME"
                  ],
                  "title": "Similarity Type"
                },
                "cosineSimilarity": {
                  "type": "number"
                },
                "amountDiff": {
                  "type": "integer"
                },
                "numberDiff": {
                  "type": "number"
                },
                "same": {
                  "type": "boolean"
                }
              },
              "type": "object",
              "title": "Entity Similarity"
            },
            "Geometry": {
              "required": [
                "boundingBox"
              ],
              "properties": {
                "polygon": {
                  "$ref": "#/components/schemas/Polygon"
                },
                "boundingBox": {
                  "$ref": "#/components/schemas/BoundingBox"
                }
              },
              "type": "object",
              "title": "Geometry"
            },
            "ImageContent": {
              "required": [
                "id",
                "mediaId"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "mediaId": {
                  "type": "string"
                },
                "documentPages": {
                  "items": {
                    "$ref": "#/components/schemas/DocumentPage"
                  },
                  "type": "array"
                },
                "imageHash": {
                  "type": "string"
                },
                "codes": {
                  "items": {
                    "$ref": "#/components/schemas/Code"
                  },
                  "type": "array"
                },
                "metaData": {
                  "$ref": "#/components/schemas/ImageMetaData"
                },
                "label": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "type": "object",
              "title": "Image Content"
            },
            "TextContent": {
              "required": [
                "id",
                "mediaId"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "mediaId": {
                  "type": "string"
                },
                "text": {
                  "type": "string"
                },
                "label": {
                  "$ref": "#/components/schemas/Label"
                }
              },
              "type": "object",
              "title": "Text Content"
            },
            "ImageMetaData": {
              "required": [
                "width",
                "height"
              ],
              "properties": {
                "width": {
                  "type": "integer"
                },
                "height": {
                  "type": "integer"
                }
              },
              "type": "object",
              "title": "Image Meta Data"
            },
            "Observation": {
              "required": [
                "executionId"
              ],
              "properties": {
                "executionId": {
                  "type": "string"
                },
                "imageContents": {
                  "items": {
                    "$ref": "#/components/schemas/ImageContent"
                  },
                  "type": "array"
                },
                "textContents": {
                  "items": {
                    "$ref": "#/components/schemas/TextContent"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "title": "Execution Observation"
            },
            "KeyValuePair": {
              "required": [
                "key"
              ],
              "properties": {
                "key": {
                  "$ref": "#/components/schemas/Entity"
                },
                "entityValue": {
                  "$ref": "#/components/schemas/Entity"
                },
                "keyValueSetValue": {
                  "$ref": "#/components/schemas/KeyValueSet"
                },
                "tableValue": {
                  "$ref": "#/components/schemas/Table"
                },
                "tag": {
                  "type": "string"
                }
              },
              "type": "object",
              "title": "Key Value Pair"
            },
            "KeyValueSet": {
              "properties": {
                "id": {
                  "type": "string"
                },
                "tag": {
                  "type": "string"
                },
                "pairs": {
                  "items": {
                    "$ref": "#/components/schemas/KeyValuePair"
                  },
                  "type": "array"
                },
                "entity": {
                  "$ref": "#/components/schemas/Entity"
                }
              },
              "type": "object",
              "title": "Key Value Set"
            },
            "Label": {
              "required": [
                "index",
                "name",
                "confidence"
              ],
              "properties": {
                "index": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "confidence": {
                  "type": "number"
                }
              },
              "type": "object",
              "title": "Label"
            },
            "MatchField": {
              "required": [
                "fieldName",
                "clause",
                "collection",
                "mode"
              ],
              "properties": {
                "fieldName": {
                  "type": "string"
                },
                "clause": {
                  "type": "string",
                  "enum": [
                    "MUST",
                    "MUST_NOT",
                    "SHOULD",
                    "FILTER"
                  ],
                  "title": "Bool Clause"
                },
                "fuzziness": {
                  "type": "integer"
                },
                "auto": {
                  "type": "string"
                },
                "filter": {
                  "$ref": "#/components/schemas/EntityFilter"
                },
                "collection": {
                  "$ref": "#/components/schemas/Collection"
                },
                "threshold": {
                  "type": "number"
                },
                "num_results": {
                  "type": "integer"
                },
                "mode": {
                  "type": "string",
                  "enum": [
                    "SEARCH",
                    "COMPARE",
                    "SEARCH_COMPARE"
                  ],
                  "title": "Field Mode"
                },
                "dimension": {
                  "type": "string",
                  "enum": [
                    "EMPTY",
                    "ENTITY",
                    "TABLE_ROW"
                  ],
                  "title": "Query Dimension"
                },
                "analyzer": {
                  "type": "string"
                }
              },
              "type": "object",
              "title": "Match Field"
            },
            "MatchGroup": {
              "required": [
                "tag",
                "index"
              ],
              "properties": {
                "tag": {
                  "type": "string"
                },
                "fields": {
                  "items": {
                    "$ref": "#/components/schemas/MatchField"
                  },
                  "type": "array"
                },
                "index": {
                  "type": "string"
                }
              },
              "type": "object",
              "title": "Match Group"
            },
            "Point": {
              "required": [
                "x",
                "y"
              ],
              "properties": {
                "x": {
                  "type": "number"
                },
                "y": {
                  "type": "number"
                }
              },
              "type": "object",
              "title": "Point"
            },
            "Polygon": {
              "properties": {
                "points": {
                  "items": {
                    "$ref": "#/components/schemas/Point"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "title": "Polygon"
            },
            "Table": {
              "required": [
                "id",
                "entity"
              ],
              "properties": {
                "id": {
                  "type": "string"
                },
                "entity": {
                  "$ref": "#/components/schemas/Entity"
                },
                "tag": {
                  "type": "string"
                },
                "headers": {
                  "items": {
                    "$ref": "#/components/schemas/Entity"
                  },
                  "type": "array"
                },
                "rows": {
                  "items": {
                    "$ref": "#/components/schemas/KeyValueSet"
                  },
                  "type": "array"
                }
              },
              "type": "object",
              "title": "Table"
            },
            "TopKIndexFilter": {
              "required": [
                "index",
                "topk"
              ],
              "properties": {
                "index": {
                  "type": "string"
                },
                "topk": {
                  "type": "integer"
                }
              },
              "type": "object",
              "title": "Top K Index Filter"
            },
            "LinkedDocument": {
              "required": [
                "tag"
              ],
              "properties": {
                "document": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "fields": {
                  "items": {
                    "$ref": "#/components/schemas/LinkedField"
                  },
                  "type": "array"
                },
                "tag": {
                  "type": "string"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "title": "Linked Document"
            },
            "Error": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "LinkedField": {
              "required": [
                "fieldName"
              ],
              "properties": {
                "documentId": {
                  "type": "string"
                },
                "index": {
                  "type": "string"
                },
                "score": {
                  "type": "number"
                },
                "fieldName": {
                  "type": "string"
                },
                "textValue": {
                  "type": "string"
                },
                "quantityValue": {
                  "type": "integer"
                },
                "numberValue": {
                  "type": "number"
                },
                "unitValue": {
                  "type": "string"
                },
                "dateValue": {
                  "type": "string",
                  "format": "date-time"
                },
                "textData": {
                  "type": "string"
                },
                "quantityData": {
                  "type": "integer"
                },
                "numberData": {
                  "type": "number"
                },
                "unitData": {
                  "type": "string"
                },
                "dateData": {
                  "type": "string",
                  "format": "date-time"
                },
                "cosineSimilarity": {
                  "type": "number"
                },
                "quantityDiff": {
                  "type": "integer"
                },
                "numberDiff": {
                  "type": "number"
                },
                "same": {
                  "type": "boolean"
                },
                "entityId": {
                  "type": "string"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "title": "Linked Field"
            }
          },
          "securitySchemes": {
            "api_key": {
              "type": "apiKey",
              "name": "api_key",
              "in": "header"
            }
          }
        }
      }
    }
  },
  "docusaurus-theme-classic": {},
  "docusaurus-theme-redoc": {},
  "docusaurus-bootstrap-plugin": {},
  "docusaurus-mdx-fallback-plugin": {}
}